<apex:page controller="CapTableDHTMLXController" showHeader="false" sidebar="false" standardStylesheets="true" docType="html-5.0">

    <apex:includeScript value="{!URLFOR($Resource.jquery)}"/>
    <apex:includeScript value="{!URLFOR($Resource.DHTMLX, '/codebase/dhtmlx.js')}"/> 
    <apex:stylesheet value="{!URLFOR($Resource.DHTMLX, '/skins/material/dhtmlx.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DHTMLX, '/skins/terrace/dhtmlx.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DHTMLX, '/skins/web/dhtmlx.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DHTMLX, '/skins/skyblue/dhtmlx.css')}"/>
    
    <apex:includeScript value="/soap/ajax/26.0/connection.js" />
    
    <style type="text/css" media="screen">
        html, body{
            margin:0px;
            padding:0px;
            height:100%;
            overflow:hidden !important;
        }   
        .dhxwins_vp_auto {
        	overflow:hidden !important;
        }
        div#layoutObj {
            position: relative;
        	/*margin-top: 15px;*/
            margin-left: 0px;
            width: 100%;
        	/*height: 364px;*/
        }
        .uneven{
        	background-color: #f3f3f3a1;
        }
        a {
        	text-decoration: none;
        }
        a:hover {
        	text-decoration: underline;
        }
        div.gridbox_material.gridbox table.obj tr td {
    		border-bottom: 1px solid rgb(205, 202, 202);
        }
        .grid_hover  {
        	background-color: #f9d3f136;
        }
        div.gridbox_material.gridbox table.obj tr td, .dhx_grid_adjust , .standartTreeRow{
        	font-size: 13px;
        }
        .dhx_cell_hdr_text input{
        	display:none;
        }
        div.gridbox_dhx_terrace.gridbox table.obj tr td {
            padding-left: 5px;
            padding-right: 5px;
        }
        div.gridbox_dhx_terrace.gridbox table.hdr td div.hdrcell { 
        	padding-left: 5px;
        }
        .dhxtree_dhx_terrace span.selectedTreeRow {
            background-color: #d9eaff !important;
        }
        .dhtmlx-info a {
        	text-decoration: underline;
        }
        .dhx_combo_edit {
        	text-align: right;
        }
        div.gridbox div.ftr td {
        	font-style: normal !important;
        }
        .hdr td {
        	border-right: 1px solid #dfdfdf !important;
        }
        .popupDiv {
        	padding: 10px;
        	margin: 8px 0px 0px -35px;
        	line-height: 1.25em;
        	position:fixed;
        	display:none;
        	z-index:999;
            z-index: 999;
            background: white;
            border-radius: .25rem;
        	min-width:200px;
            width: max-content;
            min-height: 2rem;
            box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.16);
            border: 1px solid rgb(221, 219, 218);
        }
        div.gridbox_material.gridbox table.hdr td.dhxgrid_sort_desc_col div, div.gridbox_material.gridbox table.hdr td.dhxgrid_sort_asc_col div {
    		padding-left: 6px !important;
        }
        .popupFieldLabel {
        	float:left;
        	clear: both;
        	text-transform: uppercase;
        }
        .popupFieldValue {
        	margin-left: 15px;
        	float: right;
        }
        .xhdr table, .ftr table {
        	padding-right: 0px !important;
        }
</style>
<body>
    <div id="wrapper">
        <div id="toolbarObj" style="height:35px"></div>
        <div id="layoutObj">
        
        </div>
        <br/><br/><br/>
    </div>
    
    <script type="text/javascript">
    var yPos;
    var xPos;
    $("body").mousemove(function(e) {
        yPos = e.pageY;
        xPos = e.pageX;
    })
    
    var formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
    });
    
    var ParentUrl = (window.location != window.parent.location) ? document.referrer : document.location.href;
    parent.postMessage('setBaseUrl' + '-del-'+ document.location.href , ParentUrl);
    
	dhtmlXForm.prototype.items.input5 = {
  
        render: function(item, data) {
            
            item._type = "input5";
            item._enabled = true;
            
            this.doAddLabel(item, data);
            real_type = "text";
            if(typeof data['override_type'] !== 'undefined'){
                real_type = data['override_type'];
            }
            this.doAddInput(item, data, "INPUT", real_type, true, true, "dhxlist_txt_textarea");
            this.doAttachEvents(item);
            
            item._value = data.value;//(data.value||"");
            item.childNodes[1].childNodes[0].value = item._value;
            
            this.setAttribute(item, data, 'placeholder');
            this.setAttribute(item, data, 'min');//mobile only
            this.setAttribute(item, data, 'max');//mobile only
            this.setAttribute(item, data, 'step');//mobile only
            
            this.setNoValueAttribute(item, data, 'autofocus');
            this.setNoValueAttribute(item, data, 'required');
            
            return this;
            
        },
        
        setAttribute: function(item, data, attr) {
            if(typeof data[attr] !== 'undefined')
                item.childNodes[1].childNodes[0].setAttribute(attr, data[attr]); 
        }, 
        
        setNoValueAttribute: function(item, data, attr) {
            if(typeof data[attr] !== 'undefined')
                item.childNodes[1].childNodes[0].setAttributeNode(document.createAttribute(attr)); 
        }
    };
    
    (function(){
        for (var a in {doAddLabel:1,doAddInput:1,doAttachEvents:1,destruct:1,doUnloadNestedLists:1,setText:1,getText:1,setValue:1,getValue:1,updateValue:1,enable:1,disable:1,setWidth:1,setReadonly:1,isReadonly:1,setFocus:1,getInput:1})
            dhtmlXForm.prototype.items.input5[a] = dhtmlXForm.prototype.items.input[a];
    })();
    
    Date.prototype.monthNames = [
        "January", "February", "March",
        "April", "May", "June",
        "July", "August", "September",
        "October", "November", "December"
    ];
    Date.prototype.getMonthName = function() {
        return this.monthNames[this.getMonth()];
    };
    Date.prototype.getShortMonthName = function () {
        return this.getMonthName().substr(0, 3);
    };
    
    function getToolbarInfo(){
        var tab;
        if (Toolbar.getItemState("Shares")){
            tab = "Shares";
        } else if (Toolbar.getItemState("Dollars")){
            tab = "Dollars";
        } else {
            tab = "Percentage";
        }
        var filter;
        if (Toolbar.getItemState("All")){
            filter = "All";
        } else if (Toolbar.getItemState("Voting")){
            filter = "Voting";
        } else {
            filter = "Non-Voting";
        }
        var obj = {
            filter:  filter,
            tab: tab
        };
        return obj;
    }
    
    window.addEventListener("message", function(event) {
        if (event.data.includes('RefreshGrid')) {
            var tInfo = getToolbarInfo();
            refreshGrid(tInfo.filter,tInfo.tab);
        }
    }, false);
        
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
        vars[key] = value;
    });
    var recordId = vars["recordId"];
    var dhtmlxSkin = vars["skin"];
    var communityName = vars["communityName"];
    var isCommunity = JSON.parse(vars["isCommunity"]);
    var componentHeight = vars["componentHeight"];
    var isAllowEditing = JSON.parse(vars["isAllowEditing"]);
	
    var jsRounds;
    var advancedEditWin;
    var RoundTooltip;
    var exportHeaderLabels;
    
    var componentHeightInt = Number(componentHeight);
    componentHeightInt = componentHeightInt - 36;
    document.getElementById("layoutObj").style.height = componentHeightInt + "px"; 
    
    var lSkin = "dhx_" + dhtmlxSkin;
    if (dhtmlxSkin=='material'){
        lSkin =dhtmlxSkin;
    }
    
    if(dhtmlxSkin=='material'){
        var sheet = document.createElement('style')
        sheet.innerHTML = ".dhxgrid_sort_desc, .dhxgrid_sort_asc {width:0px;} .selectedTreeRow {background-color: transparent;}";
        document.body.appendChild(sheet);
    }
	
    Toolbar = new dhtmlXToolbarObject({
        parent: "toolbarObj",
        icons_path: ("{!URLFOR($Resource.DHTMLX)}" + '/customIcons/' )
    });
    
    
    Toolbar.attachEvent("onClick", function(id){
        console.log(id);
        if (id=="new_shareholder"){
            parent.postMessage('new_shareholder', ParentUrl);
        } else if (id=="new_series"){
            parent.postMessage('new_series', ParentUrl);
        } else if (id=="Export"){
            var csv = 'Record ID,'+exportHeaderLabels + ', Total Investment' + '\n';
            var columnDivider = ',';
            CapSharesGrid.setCSVDelimiter("Æ");
            s = CapSharesGrid.serializeToCSV().replaceAll('_blank','');
            var arrayOfStrings = s.split('Æ');

            for(let cell of arrayOfStrings){
                if(cell.includes('\n')){
                    var val = cell.substring(0, cell.lastIndexOf('\n'))
                    if(!isNaN(val) && val.toString().indexOf('.') != -1){
                        val = parseFloat(cell).toFixed(2);
                    }
                	csv+= val+'\n';
                    cell = cell.substring(cell.lastIndexOf('\n')+1, cell.length);
                    
                }
                if(cell.includes('^/')){
                    csv+=cell.substring(cell.indexOf('^/')+2,cell.lastIndexOf('^'))+',"'+cell.substring(0,cell.indexOf('^/'))+'",'
                }else if(!isNaN(cell) && cell.toString().indexOf('.') != -1){
                    var val = parseFloat(cell).toFixed(2);
                    csv +=val+','; 
                }else{
                     csv+= cell+',';
                }
                
            }
            
            csv+='\n' ;
            for (var i=0; i<CapSharesGrid.getColumnsNum(); i++){
                csv += ','+CapSharesGrid.getFooterLabel(i).replaceAll(',','').replaceAll('$','').replaceAll('%','');
            }
            var hiddenElement = document.createElement('a');
            hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
            hiddenElement.target = '_self'; // 
            hiddenElement.download = 'CapTable.csv';  // CSV file Name* you can change it.[only name not .csv] 
            document.body.appendChild(hiddenElement); // Required for FireFox browser
            hiddenElement.click(); 
        }
    });
    
    eXcell_link.prototype.getTitle = eXcell_link.prototype.getContent;
    
    var newOpts = Array(Array('new_shareholder', 'obj', 'New Shareholder...',null),Array('new_series','obj', 'New Series...'   , null));
	if (!isCommunity || (isCommunity  && isAllowEditing)){
    	Toolbar.addButtonSelect("new", 0, "Add..", newOpts, "plusGreen.png", "plusGreen.png",true,true,3,false);
        Toolbar.addSeparator("sep1", 1);
    }
   
    
    Toolbar.addButtonTwoState("Shares", 2, "By Shares","chart.png");
    Toolbar.addButtonTwoState("Dollars", 3, "By Dollars","dollar.png");
    Toolbar.addButtonTwoState("Percentage", 4, "By Percentage","percentage.png");
    Toolbar.setItemState("Percentage", true, false);
    
    Toolbar.addSeparator("sep2", 5);
    
    Toolbar.addButtonTwoState("All", 6, "All","OrangeAll.png");
    Toolbar.addButtonTwoState("Voting", 7, "Voting","orangeV.png");
    Toolbar.addButtonTwoState("Non-Voting", 8, "Non-Voting","orangeX.png");
    Toolbar.setItemState("All", true, false);
    
    //Toolbar.addSeparator("sep2", 9);
    Toolbar.addSpacer("Non-Voting");
    Toolbar.addButton("Export", 10, "Export", "excel.ico");
    if (!isCommunity){
    	Toolbar.addButtonTwoState("AllowEdits", 11, "Editable on the Portal","pencil.png");
    }
    Toolbar.setSkin(lSkin);
    if (isAllowEditing && !isCommunity){
        Toolbar.setItemState("AllowEdits", true, false);
    }
    
    Toolbar.attachEvent("onStateChange", function(id, state){
        var tInfo = getToolbarInfo();
        
        if (id=='All'){
            refreshGrid(id,tInfo.tab);
            Toolbar.setItemState("Voting", false, false);
            Toolbar.setItemState("Non-Voting", false, false);
        }
        if (id=='Voting'){
            refreshGrid(id,tInfo.tab);
            Toolbar.setItemState("All", false, false);
            Toolbar.setItemState("Non-Voting", false, false);
        }
        if (id=='Non-Voting'){
            refreshGrid(id,tInfo.tab);
            Toolbar.setItemState("All", false, false);
            Toolbar.setItemState("Voting", false, false);
        }
        
        if (id=='Shares'){
            refreshGrid(tInfo.filter,id);
            Toolbar.setItemState("Dollars", false, false);
            Toolbar.setItemState("Percentage", false, false);
        }
        if (id=='Dollars'){
            refreshGrid(tInfo.filter,id);
            Toolbar.setItemState("Shares", false, false);
            Toolbar.setItemState("Percentage", false, false);
        }
        if (id=='Percentage'){
            refreshGrid(tInfo.filter,id);
            Toolbar.setItemState("Shares", false, false);
            Toolbar.setItemState("Dollars", false, false);
        }
        
        if (id=='AllowEdits'){
            CapTableDHTMLXController.AllowEditingUpdate (recordId,state,function(result, event) {
                if (event.type == 'exception') {
                    alert(event.message);
                } 
            });
        }
    });
    
    Layout = new dhtmlXLayoutObject({
        parent: "layoutObj",
        pattern: "1C",
        cells: [{id: "a", text: "dhtmlxGrid"}],
        skin: lSkin
    });
    Layout.cells("a").hideHeader();
	
    var CapSharesGrid;
    
        
    refreshGrid('All','Percentage');
    
    function setDollarAmmount(stage,rId,cInd,nValue,oValue){
        var tInfo = getToolbarInfo();
        
        if( Toolbar.getItemState("Shares")){
            if (stage==2){
                CapTableDHTMLXController.setShares (rId,jsRounds[cInd-1].Id ,nValue,tInfo.filter,function(result, event) {
                    if (event.type == 'exception') {
                        alert(event.message);
                    } else {
                        dhtmlx.message({
                            text: 'Investment record updated successfully.'
                        });
                    }
                }); 
            }
        } else if (Toolbar.getItemState("Dollars")){
            if (stage==2){
                CapTableDHTMLXController.setDollarAmount (rId,jsRounds[cInd-1].Id ,nValue,tInfo.filter,function(result, event) {
                    if (event.type == 'exception') {
                        alert(event.message);
                    } else {
                        
                        dhtmlx.message({
                            text: 'Investment record updated successfully.'
                        });
                        if (result!=nValue){
                            dhtmlx.message({
                                text: 'Amount adjusted to avoid partial shares.'
                            });
                            CapSharesGrid.cells(rId,cInd).setValue(result);
                        }
                        
                    }
                }); 
            }
        }
	}  
    
    function saveShares (menuData, VotingShares, NonVotingShares){
        var tInfo = getToolbarInfo();
        VotingShares = Number(VotingShares);
        NonVotingShares = Number(NonVotingShares);
        CapTableDHTMLXController.setAllShares (menuData[0],jsRounds[menuData[1]-1].Id,VotingShares,NonVotingShares,function(result, event) {
            if (event.type == 'exception') {
                alert(event.message);
            } else {
                dhtmlx.message({
                    text: 'Investment record updated successfully.'
                });
                advancedEditWin.close();
                if (tInfo.filter=="All"){
                    CapSharesGrid.cells(menuData[0],menuData[1]).setValue(String(VotingShares + NonVotingShares));
                } else if (tInfo.filter=="Voting"){
                	CapSharesGrid.cells(menuData[0],menuData[1]).setValue(String(VotingShares));
                } else if (tInfo.filter=="Non-Voting"){
                	CapSharesGrid.cells(menuData[0],menuData[1]).setValue(String(NonVotingShares));
                }
            }
        }); 
    }
    
    function GridMenuHandler(menuitemId,type){
        var menuData = CapSharesGrid.contextID.split("_"); //rowId_colInd
    	if (menuitemId=='DeleteShareholder'){
        	var isConfirmed = confirm("Proceed with deleting " + CapSharesGrid.cells(menuData[0],0).getValue().split("^")[0] + " shareholder from the CapTable?");
            if (isConfirmed){
                CapTableDHTMLXController.deleteShareholder (menuData[0],recordId,function(result, event) {
                    if (event.type == 'exception') {
                        alert(event.message);
                    } else {
                        CapSharesGrid.deleteRow(data[0]);
                    }
                });
            }
        } else if (menuitemId=='DeleteSeries'){
        	var isConfirmed = confirm("Proceed with deleting " + CapSharesGrid.getColLabel(menuData[1]) + " series from the CapTable?");
            if (isConfirmed){
                CapTableDHTMLXController.deleteSeries (jsRounds[menuData[1]-1].Id,function(result, event) {
                    if (event.type == 'exception') {
                        alert(event.message);
                    } else {
                        CapSharesGrid.deleteColumn(menuData[1]);
                    }
                });
            }
        } else if (menuitemId=='Advanced'){
            var dhxWins = new dhtmlXWindows();
            dhxWins.attachViewportTo("wrapper");
            
            advancedEditWin = dhxWins.createWindow("w1", 10, 10, 290, 180);
            advancedEditWin.setText("Advanced edit"); 
            
            advancedEditWin.center();
            advancedEditWin.setModal(true);
            advancedEditWin.button("park").hide();
            
            var advancedEditWinLayout = advancedEditWin.attachLayout("1C");
            advancedEditWinLayout.setSkin(lSkin);
            advancedEditWinLayout.cells("a").hideHeader();
            
            CapTableDHTMLXController.getInvestment (menuData[0],jsRounds[menuData[1]-1].Id,function(result, event) {
                if (event.type == 'exception') {
                    alert(event.message);
                } else {
                    var TotalShares = 0;
                    var VotingShares = 0;
                    var NonVotingShares = 0;
                    var TotalSharesStep = 1;
                    var VotingSharesStep = 1;
                    var NonVotingSharesStep = 1;
                    
                    if (result.Id!=null){
                        TotalShares = result.Shares1__c;
                        VotingShares = result.Shares__c;
                        NonVotingShares = result.Non_Voting_Shares__c;
                        TotalSharesStep = Math.round(result.Shares1__c * 0.1);
                        VotingSharesStep = Math.round(result.Shares__c * 0.1);
                        NonVotingSharesStep = Math.round(result.Non_Voting_Shares__c * 0.1);
                    }

                    var advancedEditWinForm = advancedEditWinLayout.cells("a").attachForm([
                        {type: "block", style: "margin: 0px 0px 0px 0px;", list: [
                            {type: "settings", position: "label-left",labelWidth: 110, inputWidth: 120},
                            {type: "input5", override_type: "number", step:TotalSharesStep, name: "TotalShares", label: "Total Shares", value: TotalShares},
                            {type: "input5", override_type: "number", step:VotingSharesStep, name: "VotingShares", label: "Voting Shares", value: VotingShares},
                            {type: "input5", override_type: "number", step:NonVotingSharesStep, name: "NonVotingShares", label: "Non-Voting Shares", value: NonVotingShares},
                            {type: "button", name: "Save", value: "Save", offsetTop: 10, offsetLeft: 85}
                        ]}
                    ]);
                    
                    var tInfo = getToolbarInfo();
                    if (tInfo.filter=='All'){
                        advancedEditWinForm.setItemFocus("TotalShares");
                    } else if (tInfo.filter=='Voting'){
                        advancedEditWinForm.setItemFocus("VotingShares");
                    } else if (tInfo.filter=='Non-Voting'){
                        advancedEditWinForm.setItemFocus("NonVotingShares");
                    }
                    
                    
                    advancedEditWinForm.attachEvent("onInputChange", function (name, value, form){
                        if (name=="VotingShares"){
                        	advancedEditWinForm.setItemValue("TotalShares", Number(advancedEditWinForm.getItemValue("NonVotingShares")) + Number(value));
                        } else if (name=="NonVotingShares"){
                        	advancedEditWinForm.setItemValue("TotalShares", Number(advancedEditWinForm.getItemValue("VotingShares")) + Number(value));
                        } else if (name=="TotalShares"){
                            var oldTotal = 0;   
                            oldTotal = Number(advancedEditWinForm.getItemValue("VotingShares")) + Number(advancedEditWinForm.getItemValue("NonVotingShares"));
                            if (oldTotal!=0){
                                var Vpercent = Number(advancedEditWinForm.getItemValue("VotingShares")) * 100 / oldTotal;
                            	var diff = value - oldTotal;
                                var newVS = 0;
                                newVS = Math.round(Number(advancedEditWinForm.getItemValue("VotingShares")) + (Vpercent*diff/100));
                                var newNVS = 0;  
                                newNVS = Math.round(Number(advancedEditWinForm.getItemValue("NonVotingShares"))+(((100-Vpercent)*diff)/100));
                                                    
                                advancedEditWinForm.setItemValue("VotingShares", newVS);
                                advancedEditWinForm.setItemValue("NonVotingShares", newNVS);
                            } else {
                            	advancedEditWinForm.setItemValue("VotingShares", value);
                            }
                        }
                    });
                    
                    advancedEditWinForm.attachEvent("onEnter",function(){
                        saveShares(menuData,advancedEditWinForm.getItemValue("VotingShares"), advancedEditWinForm.getItemValue("NonVotingShares"));
                    });
                    advancedEditWinForm.attachEvent("onButtonClick", function(name){
                        if (name=='Save'){
                            saveShares(menuData,advancedEditWinForm.getItemValue("VotingShares"), advancedEditWinForm.getItemValue("NonVotingShares"));
                        } 
                    });
                }
            });
            
        }
        
        return true;    
    }
                                                    
    
    
    function refreshGrid(filterValue,tabName){
        Layout.cells("a").progressOn();
        CapTableDHTMLXController.getCapTableData (recordId,filterValue,tabName,function(result, event) {
            if (event.type == 'exception') {
                alert(event.message);
            } else {
                var data = result;
                jsRounds =  data.rounds;
                
                try{CapSharesGrid.destructor();}catch(e){}
                CapSharesGrid = Layout.cells("a").attachGrid();
                
                var TableHeaders = 'Shareholder';
                
                var TableWidths = '""';
                var TableAligns = 'left';
                var TableColTypes = 'link';
                var TableColSorting = 'str';
                var TableFooter = 'Total';
                var TableFooterStyles = ["font-weight:bold;text-align: right;"];
                //var SerializableColumns = 'true';
                
                var i=1;
                var rowTotalCol = '';
                if (tabName=='Shares'){
                    rowTotalCol = 'ron[=';
                    CapSharesGrid.setMathRound(0);
                } else if (tabName=='Dollars'){
                    rowTotalCol = 'ron[=';
                    CapSharesGrid.setMathRound(0);
                } else if (tabName=='Percentage'){
                    rowTotalCol = 'ron[=';
                    CapSharesGrid.setMathRound(2);
                }
                
                exportHeaderLabels = 'Shareholder';
                for(let item of data.rounds){
                    exportHeaderLabels += ',' + item.Series_Type__c;
                    //SerializableColumns += ',true';
                    
                    TableHeaders+=',' + '<div style="width:100%; text-align:center; /*position: absolute;*/height: 100%;" onmouseenter="showRoundTooltip(this)" onmouseleave="hideRoundTooltip(this)"   id="' + item.Id + '">' + item.Series_Type__c; 
                    if (item.Close_Date__c){
                        var d = new Date(item.Close_Date__c);
                        var clDate = ' (' + d.getShortMonthName() + '-' + d.getFullYear().toString().substr(-2) + ')';
                        TableHeaders+= clDate;
                        exportHeaderLabels += clDate;
                    }
                    
                    TableHeaders+= '<div id="' + item.Id +  '-popup" class="popupDiv" onclick="event.stopPropagation()"><div style="display:inline-block">';
                    
                    TableHeaders+='<div style="float:left;clear: both;min-width: 120px; text-transform: uppercase; text-align: left; "><a style="color:	#006dcc !important;" href="/' + item.Id + '">' + item.Series_Type__c + '</a></div>';
                   	var postmv = 0;
                    if (!isCommunity || (isCommunity && isAllowEditing)){
                        TableHeaders+='<div style="float:left;margin-left: 15px;float: right;text-transform: capitalize; font-size: 11px; margin-bottom: 5px;  cursor: pointer;" onclick="deleteSeries(\'' + item.Series_Type__c + '\'\\,\'' + item.Id + '\')">Delete Series</div>';
                    }
                    if (item.Total_Committed__c){
                        TableHeaders+='<div class="popupFieldLabel" title="Total Committed">Total Committed:</div>';
                        TableHeaders+='<div class="popupFieldValue">' + String(formatter.format(item.Total_Committed__c)).replaceAll(',','&#44;') + '</div>';
                        postmv = Number(item.Total_Committed__c);
                    }
                    if (item.Share_Price__c){
                        TableHeaders+='<div class="popupFieldLabel" title="Total Committed">Share Price:</div>';
                        TableHeaders+='<div class="popupFieldValue">' + String(formatter.format(item.Share_Price__c)).replaceAll(',','&#44;') + '</div>';
                    }
                    if (item.Pre_Money_Valuation__c){
                        TableHeaders+='<div class="popupFieldLabel" title="Total Committed">Pre-Money Valuation:</div>';
                        TableHeaders+='<div class="popupFieldValue">' + String(formatter.format(item.Pre_Money_Valuation__c)).replaceAll(',','&#44;') + '</div>';
                        postmv+=Number(item.Pre_Money_Valuation__c);
                    }
                    if (postmv){
                        TableHeaders+='<div class="popupFieldLabel" title="Total Committed">Post-Money Valuation:</div>';
                        TableHeaders+='<div class="popupFieldValue">' + String(formatter.format(postmv)).replaceAll(',','&#44;') + '</div>';
                    }
                    if (item.Close_Date__c){
                        var d = new Date(item.Close_Date__c);
                        var fd = d.getFullYear() + '-' + ('0' + (d.getMonth()+1)).slice(-2) + '-' + ('0' + d.getDate()).slice(-2) ;
                        TableHeaders+='<div class="popupFieldLabel" title="Total Committed">Close Date:</div>';
                        TableHeaders+='<div class="popupFieldValue">' + fd + '</div>';
                    }
                    
                    TableHeaders+='</div></div></div>';
                    TableWidths+=',""';
                    TableAligns+=',right';
                    if (tabName=='Shares'){
                    	TableColTypes+=',edn';
                    } else if (tabName=='Dollars'){
                    	TableColTypes+=',edn';
                    } else if (tabName=='Percentage'){
                    	TableColTypes+=',ron';
                    }
                    
                    TableColSorting+=',int';
                    rowTotalCol+='c' + i + '+';
                    if (tabName=='Percentage'){
                        TableFooter+=',100.00%';
                    } else if (tabName=='Dollars'){
                    	TableFooter+=',#stat_total';
                    } else {
                    	TableFooter+=',#stat_total';
                    }
                    TableFooterStyles.push("font-weight:bold;text-align: right;");
                    i++;
                }
                rowTotalCol = rowTotalCol.substring(0, rowTotalCol.length - 1) + ']';
                
                TableHeaders+=',<div style="width:100%; text-align:center;font-weight:bold;">Total Investment</div>';
                TableWidths+=',"100"';
                TableAligns+=',right';
                if(tabName=='Percentage'){
                	TableColTypes+=',ron';
                } else {
                	TableColTypes+=',' + rowTotalCol;
                }
                
                TableColSorting+=',int';
                if (tabName=='Percentage'){
                    TableFooter+=',100.00%';
                } else if (tabName=='Dollars'){
                    	TableFooter+=',#stat_total';
                } else {
                    TableFooter+=',#stat_total';
                }
                TableFooterStyles.push("font-weight:bold;text-align: right;");
                //SerializableColumns+=',false';
    			
                GridMenu = new dhtmlXMenuObject();
                GridMenu.renderAsContextMenu();
                GridMenu.attachEvent("onClick",GridMenuHandler);
                GridMenu.loadStruct('{items:[{id: "Advanced", text: "Advanced..."},{id: "DeleteShareholder", text: "Delete Shareholder..."}]}');
                
				if (!isCommunity || (isCommunity && isAllowEditing)){
                    CapSharesGrid.enableContextMenu(GridMenu);
                }                
                CapSharesGrid.setHeader(TableHeaders);
                CapSharesGrid.setInitWidths(TableWidths);
                //CapSharesGrid.setColumnMinWidth("100,100,100,150,200,100,150,100,100,100,150,200,100,150,100,100,100,150,200");
                //CapSharesGrid.enableAutoWidth(true,600,100);
                CapSharesGrid.setColAlign(TableAligns);
                CapSharesGrid.setColTypes(TableColTypes);
                CapSharesGrid.setColSorting(TableColSorting);
                CapSharesGrid.attachFooter(TableFooter,TableFooterStyles);
                //CapSharesGrid.setSerializableColumns(SerializableColumns);
                CapSharesGrid.enableAlterCss("even","uneven");
                CapSharesGrid.enableRowsHover(true,'grid_hover');
                CapSharesGrid.setImagePath("{!URLFOR($Resource.DHTMLX)}" + '/skins/' + dhtmlxSkin + '/imgs/dhxgrid_'+ dhtmlxSkin + '/');
                CapSharesGrid.init();
                CapSharesGrid.splitAt(1);
                CapSharesGrid.serializeToCSV(true);
                CapSharesGrid.loadSortingFromCookie('ord-cookie');
                CapSharesGrid.enableSortingSaving('ord-cookie');
                
                for(var i=0;i< data.rounds.length+1; i++){
                    if (tabName=='Percentage'){
                    	CapSharesGrid.setNumberFormat("0,000.00%",i+1,".",",");
                    } else if (tabName=='Dollars'){
                        CapSharesGrid.setNumberFormat("$0,000.00",i+1,".",",");
                	}else {
                    	CapSharesGrid.setNumberFormat("0,000",i+1,".",",");
                    }
                }
                //CapSharesGrid.clearAll();
                var res = data.data;
                res = ($('<div>').html(res).text());
                CapSharesGrid.parse(res,"json"); 
                CapSharesGrid.adjustColumnSize(0);
                

                Layout.cells("a").progressOff();
                
                if (data.rounds.length>10){
                    for (var i = 1; i <= data.rounds.length + 1 ; i++){
                        CapSharesGrid.adjustColumnSize(i);
                    }
                }

                if (CapSharesGrid.getSortingState().length!=0) {
                    CapSharesGrid.sortRows(CapSharesGrid.getSortingState()[0],"int",CapSharesGrid.getSortingState()[1]);
                } else {
                	CapSharesGrid.sortRows(data.rounds.length+1,"int","des");
                    CapSharesGrid.setSortImgState(true,data.rounds.length+1,"desc");
                }

                CapSharesGrid.attachEvent("onCellChanged", function(rId,cInd,nValue){
                    CapSharesGrid.callEvent("onGridReconstructed",[]);
                });
                
                CapSharesGrid.attachEvent("onRowDblClicked", function(rId,cInd){
                    if (!isCommunity || (isCommunity  && isAllowEditing)){
                    	return true;
                    }
                    return false;
                });
                
                CapSharesGrid.attachEvent("onEditCell",function(stage,rId,cInd,nValue,oValue){
                    setDollarAmmount(stage,rId,cInd,nValue,oValue);
                    if (stage == 1){
                        this.editor.obj.onkeypress=function(e)
                        {  //editor area
                            var ValidChars = "0123456789";
                            if (ValidChars.indexOf((String.fromCharCode((e||event).keyCode))) == -1)
                                return false;//allow
                            else
                                return true; //deny
                        }
                        return true;
                    }
                    return true;
                });
                
                
                
                CapSharesGrid.attachEvent("onBeforeContextMenu",function(id,ind){
                    CapSharesGrid.selectRowById(id,true);

                                           
                    if (ind==0 || ind == jsRounds.length+1 || !Toolbar.getItemState("Shares")){
                        GridMenu.hideItem('Advanced');
                    } else {
                        GridMenu.showItem('Advanced');
                    }
                    return true;
                });
                
            }
        });
    }
    
    function hideRoundTooltip(e){
        $( "#"+ e.id + '-popup' ).hide(); 
    }
    
    function showRoundTooltip(e){
        $( "#"+ e.id + '-popup' ).show();
    }
    
    function deleteSeries (name,sid){
        var isConfirmed = confirm("Proceed with deleting " + name + " series from the CapTable?");
        if (isConfirmed){
            CapTableDHTMLXController.deleteSeries (sid,function(result, event) {
                if (event.type == 'exception') {
                    alert(event.message);
                } else {
                    var tInfo = getToolbarInfo();
                    refreshGrid(tInfo.filter,tInfo.tab);
                }
            });
        }
    }
   	
    function stopPropagation(e){
    	e.stopImmediatePropagation();
    }
    
    String.prototype.replaceAll = function(search, replace){
        return this.split(search).join(replace);
    }
    
    if (window.attachEvent)
        window.attachEvent("onresize",resizeLayout);
    else
        window.addEventListener("resize",resizeLayout, false);
    function resizeLayout(){
        window.clearTimeout(t);
        var t = window.setTimeout(function(){
            Layout.setSizes(false);
        },200);
    }
    
    </script>
    
</body>
</apex:page>